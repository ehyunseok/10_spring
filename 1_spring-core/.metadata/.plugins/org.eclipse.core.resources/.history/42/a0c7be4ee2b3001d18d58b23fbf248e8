package com.greedy.seciton01.properties.javaconfig.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.context.annotation.Scope;

import com.greedy.seciton01.properties.javaconfig.Beverage;
import com.greedy.seciton01.properties.javaconfig.Bread;
import com.greedy.seciton01.properties.javaconfig.Product;
import com.greedy.seciton01.properties.javaconfig.ShoppingCart;




@Configuration
/* 클래스 패스 하위 경로를 기술한다. 폴더의 구분은 슬래시 또는 역슬래시로 한다. */
@PropertySource("product-info.properties")
public class ContextConfiguration {
	
	/* 치환자 문법을 이용하여 properties에 저장된 key를 입력하면 value에 해당하는 값을 꺼내온다.
	 * 내부에 공백ㅇ을 사용하면 값을 읽어오지 못하므로 주의한다.
	 *  : 뒤의 값은 값을 읽어오지 못했을 경우의 대체값이다. */
	@Value("${bread.carpbread.name:슈크림붕어빵}")	// 중괄호안에서는 공백을 쓰면 안된다!!!
	private String carpBreadName;
	@Value("${bread.carpbread.price:1500}")
	private int carpBreadPrice; 

	@Bean
	public Product carpBread() {
		
		return new Bread("붕어빵", 2000, new java.util.Date());
	}
	
	@Value("${beverage.milk.name}")	// 중괄호안에서는 공백을 쓰면 안된다!!!
	private String milkName;
	@Value("${beverage.milk.price}")
	private int milkPrice; 
	@Value("${beverage.milk.capacity}")
	private int milkCapacity; 
	
	@Bean
	public Product milk() {
		
		return new Beverage(milkName, milkPrice, milkCapacity);
	}
	
	@Bean
	public Product water(@Value("${beverage.water.name}") String milkName,
			@Value("${beverage.milk.price}") int milkPrice, 
			@Value("${beverage.milk.capacity}") int milkCapacity) {
		
		return new Beverage("지리산암반수", 1000, 500);
	}
	
	@Bean
	@Scope("prototype")			// singleton에서 prototype으로 변경함
	public ShoppingCart cart() {
		
		return new ShoppingCart();
	}
	
}
